// Enhanced Debug Tool f√ºr Audio Deck System\n// Zur einfachen Fehlerbehebung und zum Testen\n\nclass AudioDeckDebugTool {\n  constructor() {\n    this.debugMode = localStorage.getItem('audioDecks_debugMode') === 'true';\n    this.logHistory = [];\n    this.maxLogHistory = 1000;\n    \n    if (this.debugMode) {\n      console.log('üîß AudioDeckDebugTool: Debug mode enabled');\n      this.setupDebugInterface();\n    }\n  }\n\n  log(component, message, data = null) {\n    const timestamp = new Date().toISOString();\n    const logEntry = {\n      timestamp,\n      component,\n      message,\n      data: data ? JSON.stringify(data, null, 2) : null\n    };\n    \n    this.logHistory.unshift(logEntry);\n    if (this.logHistory.length > this.maxLogHistory) {\n      this.logHistory = this.logHistory.slice(0, this.maxLogHistory);\n    }\n    \n    if (this.debugMode) {\n      console.log(`üîß [${component}] ${message}`, data || '');\n    }\n  }\n\n  error(component, message, error) {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      component,\n      message,\n      error: error?.message || error,\n      stack: error?.stack\n    };\n    \n    this.logHistory.unshift(logEntry);\n    console.error(`‚ùå [${component}] ${message}`, error);\n  }\n\n  enableDebugMode() {\n    this.debugMode = true;\n    localStorage.setItem('audioDecks_debugMode', 'true');\n    console.log('üîß AudioDeckDebugTool: Debug mode enabled');\n    this.setupDebugInterface();\n  }\n\n  disableDebugMode() {\n    this.debugMode = false;\n    localStorage.setItem('audioDecks_debugMode', 'false');\n    console.log('üîß AudioDeckDebugTool: Debug mode disabled');\n    this.removeDebugInterface();\n  }\n\n  setupDebugInterface() {\n    // Add debug button to page\n    if (!document.getElementById('audioDeckDebugButton')) {\n      const debugButton = document.createElement('button');\n      debugButton.id = 'audioDeckDebugButton';\n      debugButton.innerHTML = 'üîß Debug';\n      debugButton.style.cssText = `\n        position: fixed;\n        top: 10px;\n        right: 10px;\n        z-index: 10000;\n        background: #1f2937;\n        color: #60a5fa;\n        border: 1px solid #374151;\n        border-radius: 4px;\n        padding: 8px 12px;\n        font-size: 12px;\n        cursor: pointer;\n        font-family: monospace;\n      `;\n      \n      debugButton.addEventListener('click', () => {\n        this.showDebugPanel();\n      });\n      \n      document.body.appendChild(debugButton);\n    }\n  }\n\n  removeDebugInterface() {\n    const debugButton = document.getElementById('audioDeckDebugButton');\n    if (debugButton) {\n      debugButton.remove();\n    }\n    \n    const debugPanel = document.getElementById('audioDeckDebugPanel');\n    if (debugPanel) {\n      debugPanel.remove();\n    }\n  }\n\n  showDebugPanel() {\n    // Remove existing panel\n    const existingPanel = document.getElementById('audioDeckDebugPanel');\n    if (existingPanel) {\n      existingPanel.remove();\n      return;\n    }\n\n    const panel = document.createElement('div');\n    panel.id = 'audioDeckDebugPanel';\n    panel.style.cssText = `\n      position: fixed;\n      top: 50px;\n      right: 10px;\n      width: 400px;\n      max-height: 80vh;\n      background: #111827;\n      border: 1px solid #374151;\n      border-radius: 8px;\n      z-index: 10000;\n      font-family: monospace;\n      font-size: 12px;\n      overflow: hidden;\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    `;\n\n    panel.innerHTML = `\n      <div style=\"background: #1f2937; padding: 10px; border-bottom: 1px solid #374151; display: flex; justify-content: space-between; align-items: center;\">\n        <span style=\"color: #60a5fa; font-weight: bold;\">üîß Audio Deck Debug Panel</span>\n        <button onclick=\"this.parentElement.parentElement.remove()\" style=\"background: #ef4444; color: white; border: none; border-radius: 3px; padding: 2px 6px; cursor: pointer;\">√ó</button>\n      </div>\n      <div style=\"padding: 10px;\">\n        <div style=\"margin-bottom: 10px;\">\n          <button onclick=\"audioDeckDebugTool.testAudioDeckCreation()\" style=\"margin: 2px; padding: 4px 8px; background: #065f46; color: #10b981; border: 1px solid #047857; border-radius: 3px; cursor: pointer; font-size: 10px;\">Test Deck Creation</button>\n          <button onclick=\"audioDeckDebugTool.testSourceAssignment()\" style=\"margin: 2px; padding: 4px 8px; background: #1e40af; color: #3b82f6; border: 1px solid #1d4ed8; border-radius: 3px; cursor: pointer; font-size: 10px;\">Test Source Assignment</button>\n          <button onclick=\"audioDeckDebugTool.inspectServices()\" style=\"margin: 2px; padding: 4px 8px; background: #7c2d12; color: #f97316; border: 1px solid #9a3412; border-radius: 3px; cursor: pointer; font-size: 10px;\">Inspect Services</button>\n          <button onclick=\"audioDeckDebugTool.clearLogs()\" style=\"margin: 2px; padding: 4px 8px; background: #991b1b; color: #ef4444; border: 1px solid #b91c1c; border-radius: 3px; cursor: pointer; font-size: 10px;\">Clear Logs</button>\n        </div>\n        <div id=\"debugContent\" style=\"max-height: 400px; overflow-y: auto; color: #d1d5db; background: #0f172a; padding: 8px; border-radius: 4px;\">\n          Loading debug info...\n        </div>\n      </div>\n    `;\n\n    document.body.appendChild(panel);\n    this.updateDebugContent();\n  }\n\n  updateDebugContent() {\n    const content = document.getElementById('debugContent');\n    if (!content) return;\n\n    const recentLogs = this.logHistory.slice(0, 50);\n    const serviceStatus = this.getServiceStatus();\n    \n    content.innerHTML = `\n      <div style=\"margin-bottom: 10px; padding: 5px; background: #1e293b; border-radius: 3px;\">\n        <strong style=\"color: #60a5fa;\">üîß Service Status:</strong><br>\n        ${serviceStatus}\n      </div>\n      \n      <div style=\"margin-bottom: 10px;\">\n        <strong style=\"color: #10b981;\">üìä Recent Logs (${recentLogs.length}):</strong>\n      </div>\n      \n      ${recentLogs.map(log => `\n        <div style=\"margin-bottom: 5px; padding: 3px; background: ${log.error ? '#7f1d1d' : '#0f172a'}; border-left: 3px solid ${log.error ? '#ef4444' : '#3b82f6'}; font-size: 10px;\">\n          <div style=\"color: #9ca3af;\">[${log.timestamp.split('T')[1].split('.')[0]}] <span style=\"color: #fbbf24;\">${log.component}</span></div>\n          <div style=\"color: ${log.error ? '#fca5a5' : '#e5e7eb'}; margin: 2px 0;\">${log.message}</div>\n          ${log.data ? `<div style=\"color: #9ca3af; font-family: monospace; font-size: 9px; white-space: pre-wrap; max-height: 100px; overflow-y: auto;\">${log.data}</div>` : ''}\n          ${log.error ? `<div style=\"color: #fca5a5; font-size: 9px;\">Error: ${log.error}</div>` : ''}\n        </div>\n      `).join('')}\n    `;\n  }\n\n  getServiceStatus() {\n    const services = [];\n    \n    if (window.globalStateService) {\n      services.push(`üåê GlobalStateService: ‚úÖ Available`);\n      services.push(`üìπ OBS: ${window.globalStateService.isOBSConnected?.() ? '‚úÖ Connected' : '‚ùå Disconnected'}`);\n      services.push(`üéπ MIDI: ${window.globalStateService.isMIDIConnected?.() ? '‚úÖ Connected' : '‚ùå Disconnected'}`);\n    } else {\n      services.push(`üåê GlobalStateService: ‚ùå Not Available`);\n    }\n    \n    if (window.audioDeckService) {\n      const decks = window.audioDeckService.getAllDecks?.() || [];\n      services.push(`üéõÔ∏è AudioDeckService: ‚úÖ Available (${decks.length} decks)`);\n    } else {\n      services.push(`üéõÔ∏è AudioDeckService: ‚ùå Not Available`);\n    }\n    \n    if (window.configService) {\n      services.push(`‚öôÔ∏è ConfigService: ‚úÖ Available`);\n    } else {\n      services.push(`‚öôÔ∏è ConfigService: ‚ùå Not Available`);\n    }\n    \n    return services.join('<br>');\n  }\n\n  testAudioDeckCreation() {\n    this.log('DEBUG', 'Testing audio deck creation...');\n    \n    try {\n      if (!window.audioDeckService) {\n        throw new Error('AudioDeckService not available');\n      }\n      \n      const testDeck = {\n        name: `Test Deck ${Date.now()}`,\n        description: 'Debug test deck',\n        color: 'purple',\n        orientation: 'vertical'\n      };\n      \n      const createdDeck = window.audioDeckService.createAudioDeck(testDeck);\n      \n      if (createdDeck) {\n        this.log('DEBUG', 'Audio deck created successfully', createdDeck);\n        alert('‚úÖ Test deck created successfully! Check debug logs for details.');\n      } else {\n        throw new Error('Deck creation returned null');\n      }\n    } catch (error) {\n      this.error('DEBUG', 'Failed to create test deck', error);\n      alert(`‚ùå Test deck creation failed: ${error.message}`);\n    }\n    \n    this.updateDebugContent();\n  }\n\n  testSourceAssignment() {\n    this.log('DEBUG', 'Testing source assignment...');\n    \n    try {\n      if (!window.audioDeckService) {\n        throw new Error('AudioDeckService not available');\n      }\n      \n      const decks = window.audioDeckService.getAllDecks();\n      if (decks.length === 0) {\n        throw new Error('No decks available for testing');\n      }\n      \n      const testDeck = decks[0];\n      const testSourceName = `test-source-${Date.now()}`;\n      \n      const success = window.audioDeckService.addSourceToDeck(testSourceName, testDeck.id);\n      \n      if (success) {\n        this.log('DEBUG', 'Source assignment successful', { sourceName: testSourceName, deckId: testDeck.id });\n        alert(`‚úÖ Test source \"${testSourceName}\" assigned to deck \"${testDeck.name}\"!`);\n      } else {\n        throw new Error('Source assignment returned false');\n      }\n    } catch (error) {\n      this.error('DEBUG', 'Failed to assign test source', error);\n      alert(`‚ùå Source assignment test failed: ${error.message}`);\n    }\n    \n    this.updateDebugContent();\n  }\n\n  inspectServices() {\n    this.log('DEBUG', 'Inspecting services...');\n    \n    const inspection = {\n      globalStateService: {\n        available: !!window.globalStateService,\n        obsConnected: window.globalStateService?.isOBSConnected?.(),\n        midiConnected: window.globalStateService?.isMIDIConnected?.(),\n        audioSources: window.globalStateService?.getAudioSources?.()?.length || 0\n      },\n      audioDeckService: {\n        available: !!window.audioDeckService,\n        initialized: window.audioDeckService?.initialized,\n        decksCount: window.audioDeckService?.getAllDecks?.()?.length || 0,\n        decks: window.audioDeckService?.getAllDecks?.()?.map(d => ({ id: d.id, name: d.name, sources: d.sources.length })) || []\n      },\n      configService: {\n        available: !!window.configService,\n        initialized: window.configService?.initialized\n      }\n    };\n    \n    this.log('DEBUG', 'Service inspection completed', inspection);\n    console.log('üîß AudioDeckDebugTool: Service inspection:', inspection);\n    \n    this.updateDebugContent();\n  }\n\n  clearLogs() {\n    this.logHistory = [];\n    this.log('DEBUG', 'Debug logs cleared');\n    this.updateDebugContent();\n  }\n\n  exportDebugData() {\n    const debugData = {\n      timestamp: new Date().toISOString(),\n      logs: this.logHistory,\n      serviceStatus: this.getServiceStatus(),\n      windowServices: {\n        globalStateService: !!window.globalStateService,\n        audioDeckService: !!window.audioDeckService,\n        configService: !!window.configService\n      }\n    };\n    \n    const blob = new Blob([JSON.stringify(debugData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `audio-deck-debug-${Date.now()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n    \n    this.log('DEBUG', 'Debug data exported');\n  }\n}\n\n// Create global debug tool instance\nconst audioDeckDebugTool = new AudioDeckDebugTool();\n\n// Make it globally available\nif (typeof window !== 'undefined') {\n  window.audioDeckDebugTool = audioDeckDebugTool;\n}\n\n// Auto-enable debug mode in development\nif (process.env.NODE_ENV === 'development') {\n  audioDeckDebugTool.enableDebugMode();\n}\n\n// Export for use in other modules\nexport default audioDeckDebugTool;\n\n// Console commands for manual debugging\nconsole.log(`\nüîß Audio Deck Debug Tool loaded!\n\nUseful commands:\n- audioDeckDebugTool.enableDebugMode()  // Enable debug mode\n- audioDeckDebugTool.disableDebugMode() // Disable debug mode\n- audioDeckDebugTool.inspectServices()  // Check service status\n- audioDeckDebugTool.testAudioDeckCreation() // Test deck creation\n- audioDeckDebugTool.exportDebugData()  // Export debug data\n\nServices available:\n- window.globalStateService\n- window.audioDeckService  \n- window.configService\n`);\n