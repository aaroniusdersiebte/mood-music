// MIDI Service für Controller-Integration
// Verwendet WebMIDI API für Browser + easymidi/midi für Electron
class MIDIService {
  constructor() {
    this.midiAccess = null;
    this.activeInput = null;
    this.activeOutput = null;
    this.midiMappings = new Map();
    this.isElectron = window.process && window.process.type;
    this.callbacks = new Map();
    this.lastValues = new Map(); // Für Smoothing
    this.learning = false;
    this.learningCallback = null;
    
    // MIDI Libraries für verschiedene Umgebungen
    this.easymidi = null;
    this.midi = null;
    
    // MIDI CC Mapping (Control Change Messages)
    this.defaultMappings = {
      // Volume Controls (MIDI CC 1-8 für verschiedene Quellen)
      1: { type: 'volume', target: 'master', min: 0, max: 127 },
      2: { type: 'volume', target: 'desktop', min: 0, max: 127 },
      3: { type: 'volume', target: 'mic', min: 0, max: 127 },
      4: { type: 'volume', target: 'discord', min: 0, max: 127 },
      5: { type: 'volume', target: 'browser', min: 0, max: 127 },
      6: { type: 'volume', target: 'game', min: 0, max: 127 },
      7: { type: 'volume', target: 'music', min: 0, max: 127 },
      8: { type: 'volume', target: 'alert', min: 0, max: 127 },
      
      // Hotkeys (MIDI CC 16-23 oder Note On)
      16: { type: 'hotkey', action: 'moodSwap', target: 'chill' },
      17: { type: 'hotkey', action: 'moodSwap', target: 'action' },
      18: { type: 'hotkey', action: 'playPause' },
      19: { type: 'hotkey', action: 'nextSong' },
      20: { type: 'hotkey', action: 'prevSong' },
      21: { type: 'hotkey', action: 'shuffle' },
      22: { type: 'hotkey', action: 'mute', target: 'master' },
      23: { type: 'hotkey', action: 'soundEffect', target: 'applause' }
    };
  }

  async initialize() {
    try {
      if (this.isElectron && window.electronAPI?.midi) {
        // Electron-basierte MIDI-Unterstützung
        return this.initializeElectronMIDI();
      } else {
        // Web MIDI API für Browser
        return this.initializeWebMIDI();
      }
    } catch (error) {
      console.error('MIDI initialization failed:', error);
      
      // Fallback zu Web MIDI API only
      console.log('Falling back to Web MIDI API only...');
      try {
        return this.initializeWebMIDI();
      } catch (fallbackError) {
        console.error('Web MIDI fallback also failed:', fallbackError);
        
        // Letzter Fallback: Mock-Implementation
        console.log('Using mock MIDI implementation');
        return this.initializeMockMIDI();
      }
    }
  }

  async initializeWebMIDI() {
    if (!navigator.requestMIDIAccess) {
      throw new Error('Web MIDI API not supported in this browser');
    }

    try {
      this.midiAccess = await navigator.requestMIDIAccess({ sysex: false });
      console.log('Web MIDI Access granted');
      
      // Listen for device changes
      this.midiAccess.onstatechange = (event) => {
        this.onMIDIStateChange(event);
      };

      return this.setupMIDIDevices();
    } catch (error) {
      console.error('Failed to get MIDI access:', error);
      throw error;
    }
  }

  async initializeElectronMIDI() {
    try {
      // Versuche easymidi zuerst (modernere Alternative)
      try {
        this.easymidi = require('easymidi');
        const inputs = this.easymidi.getInputs();
        const outputs = this.easymidi.getOutputs();
        
        console.log('easymidi initialized:', { inputs, outputs });
        
        // Setup Input Listener
        if (inputs.length > 0) {
          this.activeInput = new this.easymidi.Input(inputs[0]);
          this.activeInput.on('cc', (msg) => {
            this.handleMIDIMessage({
              type: 'controlChange',
              channel: msg.channel,
              note: msg.controller,
              velocity: msg.value,
              timestamp: Date.now()
            });
          });
          
          this.activeInput.on('noteon', (msg) => {
            this.handleMIDIMessage({
              type: 'noteOn',
              channel: msg.channel,
              note: msg.note,
              velocity: msg.velocity,
              timestamp: Date.now()
            });
          });
        }
        
        return { inputs, outputs };
        
      } catch (easyMidiError) {
        console.log('easymidi not available, trying legacy midi...');
        
        // Fallback zu legacy midi package
        try {
          this.midi = require('midi');
          const input = new this.midi.Input();
          const output = new this.midi.Output();
          
          const inputs = [];
          const outputs = [];
          
          for (let i = 0; i < input.getPortCount(); i++) {
            inputs.push({
              id: i,
              name: input.getPortName(i)
            });
          }
          
          for (let i = 0; i < output.getPortCount(); i++) {
            outputs.push({
              id: i,
              name: output.getPortName(i)
            });
          }
          
          // Setup legacy MIDI listener
          if (inputs.length > 0) {
            input.on('message', (deltaTime, message) => {
              this.handleMIDIMessage({
                data: message,
                timestamp: Date.now()
              });
            });
            
            input.openPort(0);
            this.activeInput = input;
          }
          
          console.log('Legacy MIDI initialized:', { inputs, outputs });
          return { inputs, outputs };
          
        } catch (legacyMidiError) {
          console.error('All MIDI packages failed:', legacyMidiError);
          // Fallback zu Mock
          return this.initializeMockMIDI();
        }
      }
      
    } catch (error) {
      console.error('Failed to initialize Electron MIDI:', error);
      throw error;
    }
  }

  setupMIDIDevices() {
    const inputs = [];
    const outputs = [];

    // Sammle alle verfügbaren Geräte
    if (this.midiAccess) {
      this.midiAccess.inputs.forEach((input) => {
        inputs.push({
          id: input.id,
          name: input.name,
          manufacturer: input.manufacturer,
          state: input.state,
          connection: input.connection
        });
        
        // Setup message listener
        input.onmidimessage = (message) => {
          this.handleMIDIMessage(message);
        };
      });

      this.midiAccess.outputs.forEach((output) => {
        outputs.push({
          id: output.id,
          name: output.name,
          manufacturer: output.manufacturer,
          state: output.state
        });
      });
    }

    console.log('MIDI Inputs:', inputs);
    console.log('MIDI Outputs:', outputs);

    return { inputs, outputs };
  }

  handleMIDIMessage(message) {
    let data, timeStamp;
    
    if (message.data) {
      // Web MIDI API Format
      data = Array.from(message.data);
      timeStamp = message.timeStamp;
    } else {
      // Electron Format
      data = message.data || message;
      timeStamp = Date.now();
    }

    const [status, note, velocity] = data;
    
    // Parse MIDI message type
    const messageType = status >> 4;
    const channel = status & 0x0F;
    
    const midiMessage = {
      type: this.getMIDIMessageType(messageType),
      channel,
      note,
      velocity,
      timestamp: timeStamp,
      raw: data
    };

    console.log('MIDI Message:', midiMessage);

    // Handle learning mode
    if (this.learning && this.learningCallback) {
      this.learningCallback(midiMessage);
      return;
    }

    // Process mapped controls
    this.processMIDIMapping(midiMessage);
  }

  getMIDIMessageType(messageType) {
    switch (messageType) {
      case 8: return 'noteOff';
      case 9: return 'noteOn';
      case 11: return 'controlChange';
      case 12: return 'programChange';
      case 14: return 'pitchBend';
      default: return 'unknown';
    }
  }

  processMIDIMapping(midiMessage) {
    const { type, note, velocity } = midiMessage;
    
    // Bestimme Mapping-Key basierend auf Message-Typ
    let mappingKey;
    if (type === 'controlChange') {
      mappingKey = note; // CC Number
    } else if (type === 'noteOn' && velocity > 0) {
      mappingKey = `note_${note}`; // Note Number
    } else {
      return; // Ignoriere andere Message-Typen
    }

    const mapping = this.midiMappings.get(mappingKey) || this.defaultMappings[mappingKey];
    if (!mapping) return;

    // Führe Mapping aus
    this.executeMIDIMapping(mapping, velocity, midiMessage);
  }

  executeMIDIMapping(mapping, value, midiMessage) {
    switch (mapping.type) {
      case 'volume':
        this.handleVolumeControl(mapping, value);
        break;
      case 'hotkey':
        this.handleHotkeyAction(mapping, value);
        break;
      default:
        console.log('Unknown mapping type:', mapping.type);
    }

    // Rufe registrierte Callbacks auf
    const callbacks = this.callbacks.get(mapping.type) || [];
    callbacks.forEach(callback => {
      try {
        callback(mapping, value, midiMessage);
      } catch (error) {
        console.error('MIDI callback error:', error);
      }
    });
  }

  handleVolumeControl(mapping, midiValue) {
    // Konvertiere MIDI-Wert (0-127) zu dB (-60 bis 0)
    const dbValue = this.midiToDecibel(midiValue, mapping.min, mapping.max);
    
    // Smoothing für sanftere Übergänge
    const smoothedValue = this.smoothValue(`volume_${mapping.target}`, dbValue);
    
    console.log(`Volume Control: ${mapping.target} = ${smoothedValue}dB (MIDI: ${midiValue})`);
    
    // Trigger Volume Change Event
    this.triggerCallback('volumeChange', {
      target: mapping.target,
      value: smoothedValue,
      midiValue,
      dbValue
    });
  }

  handleHotkeyAction(mapping, velocity) {
    // Nur auf Note On oder CC > 0 reagieren
    if (velocity === 0) return;
    
    console.log(`Hotkey Action: ${mapping.action}`, mapping.target);
    
    // Trigger Hotkey Event
    this.triggerCallback('hotkeyAction', {
      action: mapping.action,
      target: mapping.target,
      velocity
    });
  }

  // Mathematische Konvertierung MIDI zu dB (basierend auf Recherche)
  midiToDecibel(midiValue, min = 0, max = 127) {
    // Normalisiere MIDI-Wert (0-1)
    const normalized = Math.max(0, Math.min(1, (midiValue - min) / (max - min)));
    
    // Konvertiere zu OBS dB-Bereich (-60 bis 0)
    if (normalized === 0) return -60; // Mute
    return (normalized * 60) - 60; // -60 bis 0 dB
  }

  // Alternative: Logarithmische Konvertierung für natürlicheres Gefühl
  midiToDecibelLog(midiValue, min = 0, max = 127) {
    const normalized = Math.max(0, Math.min(1, (midiValue - min) / (max - min)));
    if (normalized === 0) return -60;
    
    // Logarithmische Skalierung
    return 20 * Math.log10(normalized);
  }

  // Wert-Smoothing für sanftere Übergänge
  smoothValue(key, newValue, smoothing = 0.1) {
    const lastValue = this.lastValues.get(key) || newValue;
    const smoothedValue = lastValue + (newValue - lastValue) * smoothing;
    this.lastValues.set(key, smoothedValue);
    return Math.round(smoothedValue * 100) / 100; // 2 Dezimalstellen
  }

  // MIDI Learning Mode
  startLearning(callback) {
    this.learning = true;
    this.learningCallback = callback;
    console.log('MIDI Learning started');
  }

  stopLearning() {
    this.learning = false;
    this.learningCallback = null;
    console.log('MIDI Learning stopped');
  }

  // Mapping Management
  setMapping(key, mapping) {
    this.midiMappings.set(key, mapping);
    console.log(`MIDI mapping set: ${key}`, mapping);
  }

  removeMapping(key) {
    this.midiMappings.delete(key);
    console.log(`MIDI mapping removed: ${key}`);
  }

  getAllMappings() {
    const mappings = {};
    this.midiMappings.forEach((value, key) => {
      mappings[key] = value;
    });
    return { ...this.defaultMappings, ...mappings };
  }

  // Callback System
  onVolumeChange(callback) {
    this.addCallback('volumeChange', callback);
  }

  onHotkeyAction(callback) {
    this.addCallback('hotkeyAction', callback);
  }

  addCallback(type, callback) {
    if (!this.callbacks.has(type)) {
      this.callbacks.set(type, []);
    }
    this.callbacks.get(type).push(callback);
  }

  removeCallback(type, callback) {
    const callbacks = this.callbacks.get(type) || [];
    const index = callbacks.indexOf(callback);
    if (index !== -1) {
      callbacks.splice(index, 1);
    }
  }

  triggerCallback(type, data) {
    const callbacks = this.callbacks.get(type) || [];
    callbacks.forEach(callback => {
      try {
        callback(data);
      } catch (error) {
        console.error(`MIDI callback error (${type}):`, error);
      }
    });
  }

  // Device Management
  getAvailableDevices() {
    if (this.isElectron) {
      // Electron-Umgebung: Verwende easymidi oder legacy midi
      try {
        if (this.easymidi) {
          const inputs = this.easymidi.getInputs().map((name, index) => ({
            id: name,
            name: name,
            manufacturer: 'Unknown',
            state: 'connected'
          }));
          
          const outputs = this.easymidi.getOutputs().map((name, index) => ({
            id: name,
            name: name,
            manufacturer: 'Unknown',
            state: 'connected'
          }));
          
          return { inputs, outputs };
        } else if (this.midi) {
          // Legacy midi package
          const input = new this.midi.Input();
          const output = new this.midi.Output();
          
          const inputs = [];
          const outputs = [];
          
          for (let i = 0; i < input.getPortCount(); i++) {
            inputs.push({
              id: i.toString(),
              name: input.getPortName(i),
              manufacturer: 'Unknown',
              state: 'connected'
            });
          }
          
          for (let i = 0; i < output.getPortCount(); i++) {
            outputs.push({
              id: i.toString(),
              name: output.getPortName(i),
              manufacturer: 'Unknown',
              state: 'connected'
            });
          }
          
          input.closePort();
          output.closePort();
          
          return { inputs, outputs };
        }
      } catch (error) {
        console.error('Error getting Electron MIDI devices:', error);
      }
    } else {
      // Browser-Umgebung: Web MIDI API
      if (this.midiAccess) {
        return this.setupMIDIDevices();
      }
    }
    
    return { inputs: [], outputs: [] };
  }

  initializeMockMIDI() {
    console.log('Initializing Mock MIDI - No hardware support available');
    
    // Mock MIDI-Geräte für Testzwecke
    const mockDevices = {
      inputs: [
        {
          id: 'mock-input',
          name: 'Mock MIDI Input (No Hardware)',
          manufacturer: 'Mock',
          state: 'connected'
        }
      ],
      outputs: [
        {
          id: 'mock-output',
          name: 'Mock MIDI Output (No Hardware)',
          manufacturer: 'Mock',
          state: 'connected'
        }
      ]
    };
    
    // Keyboard-Simulation für Testing
    this.setupKeyboardMIDISimulation();
    
    return mockDevices;
  }

  setupKeyboardMIDISimulation() {
    // Simulate MIDI with keyboard for testing
    // Q-U = CC 1-8 (Volume controls)
    // A-K = CC 16-23 (Hotkeys)
    const keyMap = {
      'KeyQ': { type: 'cc', cc: 1, name: 'Master Volume' },
      'KeyW': { type: 'cc', cc: 2, name: 'Desktop Audio' },
      'KeyE': { type: 'cc', cc: 3, name: 'Microphone' },
      'KeyR': { type: 'cc', cc: 4, name: 'Discord' },
      'KeyT': { type: 'cc', cc: 5, name: 'Browser' },
      'KeyY': { type: 'cc', cc: 6, name: 'Game' },
      'KeyU': { type: 'cc', cc: 7, name: 'Music' },
      'KeyI': { type: 'cc', cc: 8, name: 'Alert' },
      
      'KeyA': { type: 'cc', cc: 16, name: 'Mood: Chill' },
      'KeyS': { type: 'cc', cc: 17, name: 'Mood: Action' },
      'KeyD': { type: 'cc', cc: 18, name: 'Play/Pause' },
      'KeyF': { type: 'cc', cc: 19, name: 'Next Song' },
      'KeyG': { type: 'cc', cc: 20, name: 'Previous Song' },
      'KeyH': { type: 'cc', cc: 21, name: 'Shuffle' },
      'KeyJ': { type: 'cc', cc: 22, name: 'Mute Master' },
      'KeyK': { type: 'cc', cc: 23, name: 'Sound Effect' }
    };
    
    let pressedKeys = new Set();
    
    const handleKeyEvent = (event, velocity) => {
      const mapping = keyMap[event.code];
      if (!mapping) return;
      
      // Prevent key repeat
      if (velocity > 0 && pressedKeys.has(event.code)) return;
      
      if (velocity > 0) {
        pressedKeys.add(event.code);
      } else {
        pressedKeys.delete(event.code);
      }
      
      // Only trigger on key down for hotkeys
      if (mapping.cc >= 16 && velocity === 0) return;
      
      const midiMessage = {
        type: 'controlChange',
        channel: 0,
        note: mapping.cc,
        velocity: velocity,
        timestamp: Date.now(),
        mock: true,
        keyName: mapping.name
      };
      
      console.log(`Mock MIDI (Keyboard): ${mapping.name} (CC${mapping.cc}) = ${velocity}`);
      this.handleMIDIMessage(midiMessage);
      
      event.preventDefault();
    };
    
    // Only add keyboard listeners if not in Electron
    if (!this.isElectron) {
      window.addEventListener('keydown', (e) => {
        if (e.ctrlKey || e.altKey || e.metaKey) return; // Ignore modifier combinations
        handleKeyEvent(e, 127);
      });
      
      window.addEventListener('keyup', (e) => {
        if (e.ctrlKey || e.altKey || e.metaKey) return;
        handleKeyEvent(e, 0);
      });
      
      console.log('Keyboard MIDI simulation enabled:');
      console.log('Q-I: Volume controls (CC 1-8)');
      console.log('A-K: Hotkeys (CC 16-23)');
    }
  }

  selectInputDevice(deviceId) {
    if (this.midiAccess) {
      this.activeInput = this.midiAccess.inputs.get(deviceId);
      console.log('Selected MIDI input:', this.activeInput?.name);
    }
  }

  selectOutputDevice(deviceId) {
    if (this.midiAccess) {
      this.activeOutput = this.midiAccess.outputs.get(deviceId);
      console.log('Selected MIDI output:', this.activeOutput?.name);
    }
  }

  // LED Feedback (für Controller mit LEDs)
  sendLEDFeedback(note, velocity = 127, channel = 0) {
    if (this.activeOutput) {
      const message = [0x90 | channel, note, velocity]; // Note On
      this.activeOutput.send(message);
    }
  }

  // State Management
  onMIDIStateChange(event) {
    const port = event.port;
    console.log(`MIDI device ${port.state}: ${port.name} (${port.type})`);
    
    if (port.state === 'connected' && port.type === 'input') {
      port.onmidimessage = (message) => {
        this.handleMIDIMessage(message);
      };
    }
  }

  // Test Functions
  testMapping(key, value = 64) {
    const mapping = this.midiMappings.get(key) || this.defaultMappings[key];
    if (mapping) {
      this.executeMIDIMapping(mapping, value, { 
        type: 'test', 
        note: key, 
        velocity: value 
      });
    } else {
      console.warn('No mapping found for key:', key);
    }
  }

  // Cleanup
  destroy() {
    // Browser MIDI cleanup
    if (this.midiAccess) {
      this.midiAccess.inputs.forEach(input => {
        input.onmidimessage = null;
      });
    }
    
    // Electron MIDI cleanup
    if (this.isElectron) {
      try {
        if (this.activeInput) {
          if (this.easymidi && typeof this.activeInput.close === 'function') {
            this.activeInput.close();
          } else if (this.midi && typeof this.activeInput.closePort === 'function') {
            this.activeInput.closePort();
          }
        }
        
        if (this.activeOutput) {
          if (typeof this.activeOutput.close === 'function') {
            this.activeOutput.close();
          } else if (typeof this.activeOutput.closePort === 'function') {
            this.activeOutput.closePort();
          }
        }
      } catch (error) {
        console.error('Error during MIDI cleanup:', error);
      }
    }
    
    this.callbacks.clear();
    this.midiMappings.clear();
    this.lastValues.clear();
    
    console.log('MIDI Service destroyed');
  }
}

export default new MIDIService();
